CCS PCM C Compiler, Version 4.084, 44421               19-nov-14 18:45

               Filename: C:\Documents and Settings\Propietario\Escritorio\Practica 10\practica10.lst

               ROM used: 1394 words (17%)
                         Largest free fragment is 2048
               RAM used: 21 (6%) at main() level
                         40 (11%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   476
0003:  NOP
.................... #include "C:\Documents and Settings\Propietario\Escritorio\Practica 10\practica10.h" 
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES XT                    	//Crystal osc <= 4mhz for PCM/PCH , 3mhz to 10 mhz for PCD 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
....................  
.................... #use delay(clock=4000000) 
*
001C:  MOVLW  36
001D:  MOVWF  04
001E:  BCF    03.7
001F:  MOVF   00,W
0020:  BTFSC  03.2
0021:  GOTO   030
0022:  MOVLW  01
0023:  MOVWF  78
0024:  CLRF   77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 78,F
0028:  GOTO   024
0029:  MOVLW  4A
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  GOTO   02E
002E:  DECFSZ 00,F
002F:  GOTO   022
0030:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
....................  
.................... #include <LCD_M.C> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN dummy; 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN rs;               // The bits are allocated from 
....................            int     no_used : 4;         // be pin B0. 
....................         } lcd_control; 
....................  
....................  
.................... struct lcd_pines_datos {         // Hacemos lo mismo con esta estructura para el PORTD 
....................            int     data:4;  // los 4 bits más altos son los de datos 
....................            int     no_data:4; 
....................        } lcd_datos; 
....................  
.................... #byte lcd_control = 0x05            // Ponemos la estructura entera en el PORTA (registro 5) 
.................... #byte tris_lcd_control = 0x85    // Registro de dirección de datos para control 
....................  
.................... #byte lcd_datos =0x08               // Lo mismo para los datos, en el PORTD (registro 8) 
.................... #byte tris_lcd_datos = 0x88      // Registro de dirección de datos 
....................  
....................  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
....................  
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_d(0xFF); 
*
003E:  MOVLW  FF
003F:  BSF    03.5
0040:  MOVWF  08
....................       set_tris_a(0xF1); 
0041:  MOVLW  F1
0042:  MOVWF  05
....................       lcd_control.rw = 1; 
0043:  BCF    03.5
0044:  BSF    05.2
....................       delay_cycles(1); 
0045:  NOP
....................       lcd_control.enable = 1; 
0046:  BSF    05.1
....................       delay_cycles(1); 
0047:  NOP
....................       high = lcd_datos.data; 
0048:  MOVF   08,W
0049:  ANDLW  0F
004A:  MOVWF  3D
....................       lcd_control.enable = 0; 
004B:  BCF    05.1
....................       delay_cycles(1); 
004C:  NOP
....................       lcd_control.enable = 1; 
004D:  BSF    05.1
....................       delay_us(1); 
004E:  NOP
....................       low = lcd_datos.data; 
004F:  MOVF   08,W
0050:  ANDLW  0F
0051:  MOVWF  3C
....................       lcd_control.enable = 0; 
0052:  BCF    05.1
....................       set_tris_d(0xF0); 
0053:  MOVLW  F0
0054:  BSF    03.5
0055:  MOVWF  08
....................       return( (high<<4) | low); 
0056:  BCF    03.5
0057:  SWAPF  3D,W
0058:  MOVWF  77
0059:  MOVLW  F0
005A:  ANDWF  77,F
005B:  MOVF   77,W
005C:  IORWF  3C,W
005D:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd_datos.data = n; 
*
0031:  MOVF   3D,W
0032:  ANDLW  0F
0033:  MOVWF  77
0034:  MOVLW  F0
0035:  ANDWF  08,W
0036:  IORWF  77,W
0037:  MOVWF  08
....................       delay_cycles(1); 
0038:  NOP
....................       lcd_control.enable = 1; 
0039:  BSF    05.1
....................       delay_us(2); 
003A:  GOTO   03B
....................       lcd_control.enable = 0; 
003B:  BCF    05.1
.................... } 
003C:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd_control.rs = 0; 
003D:  BCF    05.3
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
005E:  MOVF   78,W
005F:  MOVWF  3C
0060:  BTFSC  3C.7
0061:  GOTO   03E
....................       lcd_control.rs = address; 
0062:  BTFSS  3A.0
0063:  BCF    05.3
0064:  BTFSC  3A.0
0065:  BSF    05.3
....................       delay_cycles(1); 
0066:  NOP
....................       lcd_control.rw = 0; 
0067:  BCF    05.2
....................       delay_cycles(1); 
0068:  NOP
....................       lcd_control.enable = 0; 
0069:  BCF    05.1
....................       lcd_send_nibble(n >> 4); 
006A:  SWAPF  3B,W
006B:  MOVWF  3C
006C:  MOVLW  0F
006D:  ANDWF  3C,F
006E:  MOVF   3C,W
006F:  MOVWF  3D
0070:  CALL   031
....................       lcd_send_nibble(n & 0xf); 
0071:  MOVF   3B,W
0072:  ANDLW  0F
0073:  MOVWF  3C
0074:  MOVWF  3D
0075:  CALL   031
.................... } 
0076:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_d(0xF0); 
0077:  MOVLW  F0
0078:  BSF    03.5
0079:  MOVWF  08
....................     set_tris_a(0xF1); 
007A:  MOVLW  F1
007B:  MOVWF  05
....................     lcd_control.rs = 0; 
007C:  BCF    03.5
007D:  BCF    05.3
....................     lcd_control.rw = 0; 
007E:  BCF    05.2
....................     lcd_control.enable = 0; 
007F:  BCF    05.1
....................     delay_ms(15); 
0080:  MOVLW  0F
0081:  MOVWF  36
0082:  CALL   01C
....................     for(i=1;i<=3;++i) { 
0083:  MOVLW  01
0084:  MOVWF  27
0085:  MOVF   27,W
0086:  SUBLW  03
0087:  BTFSS  03.0
0088:  GOTO   091
....................        lcd_send_nibble(3); 
0089:  MOVLW  03
008A:  MOVWF  3D
008B:  CALL   031
....................        delay_ms(5); 
008C:  MOVLW  05
008D:  MOVWF  36
008E:  CALL   01C
....................     } 
008F:  INCF   27,F
0090:  GOTO   085
....................     lcd_send_nibble(2); 
0091:  MOVLW  02
0092:  MOVWF  3D
0093:  CALL   031
....................     for(i=0;i<=3;++i) 
0094:  CLRF   27
0095:  MOVF   27,W
0096:  SUBLW  03
0097:  BTFSS  03.0
0098:  GOTO   0A2
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
0099:  MOVF   27,W
009A:  CALL   004
009B:  MOVWF  28
009C:  CLRF   3A
009D:  MOVF   28,W
009E:  MOVWF  3B
009F:  CALL   03D
00A0:  INCF   27,F
00A1:  GOTO   095
.................... } 
00A2:  BCF    0A.3
00A3:  BCF    0A.4
00A4:  GOTO   4BE (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
025B:  DECFSZ 37,W
025C:  GOTO   25E
025D:  GOTO   261
....................      address=lcd_line_two; 
025E:  MOVLW  40
025F:  MOVWF  38
....................    else 
0260:  GOTO   262
....................      address=0; 
0261:  CLRF   38
....................    address+=x-1; 
0262:  MOVLW  01
0263:  SUBWF  36,W
0264:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address); 
0265:  MOVF   38,W
0266:  IORLW  80
0267:  MOVWF  39
0268:  CLRF   3A
0269:  MOVF   39,W
026A:  MOVWF  3B
026B:  CALL   03D
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0244:  MOVF   35,W
0245:  XORLW  0C
0246:  BTFSC  03.2
0247:  GOTO   24F
0248:  XORLW  06
0249:  BTFSC  03.2
024A:  GOTO   257
024B:  XORLW  02
024C:  BTFSC  03.2
024D:  GOTO   26D
024E:  GOTO   272
....................      case '\f'   : lcd_send_byte(0,1); 
024F:  CLRF   3A
0250:  MOVLW  01
0251:  MOVWF  3B
0252:  CALL   03D
....................                    delay_ms(2); 
0253:  MOVLW  02
0254:  MOVWF  36
0255:  CALL   01C
....................                                            break; 
0256:  GOTO   278
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0257:  MOVLW  01
0258:  MOVWF  36
0259:  MOVLW  02
025A:  MOVWF  37
*
026C:  GOTO   278
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
026D:  CLRF   3A
026E:  MOVLW  10
026F:  MOVWF  3B
0270:  CALL   03D
0271:  GOTO   278
....................      default     : lcd_send_byte(1,c);     break; 
0272:  MOVLW  01
0273:  MOVWF  3A
0274:  MOVF   35,W
0275:  MOVWF  3B
0276:  CALL   03D
0277:  GOTO   278
....................    } 
.................... } 
0278:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd_control.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd_control.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................    unsigned int val; 
....................    float temp; 
....................    unsigned int limit = 25; 
*
0487:  MOVLW  19
0488:  BCF    03.5
0489:  MOVWF  25
....................  
.................... void main() 
.................... { 
*
0476:  CLRF   04
0477:  BCF    03.7
0478:  MOVLW  1F
0479:  ANDWF  03,F
047A:  MOVLW  19
047B:  BSF    03.5
047C:  MOVWF  19
047D:  MOVLW  A6
047E:  MOVWF  18
047F:  MOVLW  90
0480:  BCF    03.5
0481:  MOVWF  18
0482:  BSF    03.5
0483:  BSF    1F.0
0484:  BSF    1F.1
0485:  BSF    1F.2
0486:  BCF    1F.3
....................  
....................    setup_adc_ports(AN0); 
*
048C:  BSF    03.5
048D:  BCF    1F.0
048E:  BSF    1F.1
048F:  BSF    1F.2
0490:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0491:  BCF    03.5
0492:  BSF    1F.6
0493:  BSF    1F.7
0494:  BSF    03.5
0495:  BCF    1F.7
0496:  BCF    03.5
0497:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0498:  BSF    03.5
0499:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
049A:  BCF    03.5
049B:  BCF    14.5
049C:  BCF    26.5
049D:  MOVF   26,W
049E:  BSF    03.5
049F:  MOVWF  07
04A0:  BCF    03.5
04A1:  BSF    26.4
04A2:  MOVF   26,W
04A3:  BSF    03.5
04A4:  MOVWF  07
04A5:  BCF    03.5
04A6:  BCF    26.3
04A7:  MOVF   26,W
04A8:  BSF    03.5
04A9:  MOVWF  07
04AA:  MOVLW  01
04AB:  BCF    03.5
04AC:  MOVWF  14
04AD:  MOVLW  00
04AE:  BSF    03.5
04AF:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
04B0:  MOVF   01,W
04B1:  ANDLW  C7
04B2:  IORLW  08
04B3:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
04B4:  BCF    03.5
04B5:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
04B6:  MOVLW  00
04B7:  MOVWF  78
04B8:  MOVWF  12
04B9:  MOVLW  00
04BA:  BSF    03.5
04BB:  MOVWF  12
....................    lcd_init(); 
04BC:  BCF    03.5
04BD:  GOTO   077
....................  
....................    // TODO: USER CODE!! 
....................  
....................     
....................    set_adc_channel(0); 
04BE:  MOVLW  00
04BF:  MOVWF  78
04C0:  MOVF   1F,W
04C1:  ANDLW  C7
04C2:  IORWF  78,W
04C3:  MOVWF  1F
....................    delay_ms(10); 
04C4:  MOVLW  0A
04C5:  MOVWF  36
04C6:  CALL   01C
....................    while(true) { 
....................       val = read_adc(); // Lectura del adc (entre 0-255) 
04C7:  BSF    1F.2
04C8:  BTFSC  1F.2
04C9:  GOTO   4C8
04CA:  MOVF   1E,W
04CB:  MOVWF  20
....................       temp = ((float) val*5.0/255.0); // Conversion a tension 
04CC:  CLRF   28
04CD:  MOVF   20,W
04CE:  MOVWF  27
04CF:  CALL   0A5
04D0:  MOVF   77,W
04D1:  MOVWF  27
04D2:  MOVF   78,W
04D3:  MOVWF  28
04D4:  MOVF   79,W
04D5:  MOVWF  29
04D6:  MOVF   7A,W
04D7:  MOVWF  2A
04D8:  MOVWF  38
04D9:  MOVF   79,W
04DA:  MOVWF  37
04DB:  MOVF   78,W
04DC:  MOVWF  36
04DD:  MOVF   77,W
04DE:  MOVWF  35
04DF:  CLRF   3C
04E0:  CLRF   3B
04E1:  MOVLW  20
04E2:  MOVWF  3A
04E3:  MOVLW  81
04E4:  MOVWF  39
04E5:  CALL   0C2
04E6:  MOVF   77,W
04E7:  MOVWF  2B
04E8:  MOVF   78,W
04E9:  MOVWF  2C
04EA:  MOVF   79,W
04EB:  MOVWF  2D
04EC:  MOVF   7A,W
04ED:  MOVWF  2E
04EE:  MOVWF  32
04EF:  MOVF   79,W
04F0:  MOVWF  31
04F1:  MOVF   78,W
04F2:  MOVWF  30
04F3:  MOVF   77,W
04F4:  MOVWF  2F
04F5:  CLRF   36
04F6:  CLRF   35
04F7:  MOVLW  7F
04F8:  MOVWF  34
04F9:  MOVLW  86
04FA:  MOVWF  33
04FB:  GOTO   137
04FC:  MOVF   7A,W
04FD:  MOVWF  24
04FE:  MOVF   79,W
04FF:  MOVWF  23
0500:  MOVF   78,W
0501:  MOVWF  22
0502:  MOVF   77,W
0503:  MOVWF  21
....................       temp = 10.0*temp; // Conversion a temperatura (10mv -> 1ºC) 
0504:  CLRF   38
0505:  CLRF   37
0506:  MOVLW  20
0507:  MOVWF  36
0508:  MOVLW  82
0509:  MOVWF  35
050A:  MOVF   24,W
050B:  MOVWF  3C
050C:  MOVF   23,W
050D:  MOVWF  3B
050E:  MOVF   22,W
050F:  MOVWF  3A
0510:  MOVF   21,W
0511:  MOVWF  39
0512:  CALL   0C2
0513:  MOVF   7A,W
0514:  MOVWF  24
0515:  MOVF   79,W
0516:  MOVWF  23
0517:  MOVF   78,W
0518:  MOVWF  22
0519:  MOVF   77,W
051A:  MOVWF  21
....................       if(temp>limit) 
051B:  CLRF   28
051C:  MOVF   25,W
051D:  MOVWF  27
051E:  CALL   0A5
051F:  MOVF   7A,W
0520:  MOVWF  2A
0521:  MOVF   79,W
0522:  MOVWF  29
0523:  MOVF   78,W
0524:  MOVWF  28
0525:  MOVF   77,W
0526:  MOVWF  27
0527:  MOVF   24,W
0528:  MOVWF  2E
0529:  MOVF   23,W
052A:  MOVWF  2D
052B:  MOVF   22,W
052C:  MOVWF  2C
052D:  MOVF   21,W
052E:  MOVWF  2B
052F:  GOTO   203
0530:  BTFSS  03.0
0531:  GOTO   537
.................... 		output_HIGH(PIN_B0); 
0532:  BSF    03.5
0533:  BCF    06.0
0534:  BCF    03.5
0535:  BSF    06.0
.................... 	  else 
0536:  GOTO   53B
.................... 		output_LOW(PIN_B0); 
0537:  BSF    03.5
0538:  BCF    06.0
0539:  BCF    03.5
053A:  BCF    06.0
....................    	  printf(lcd_putc,"\fTemp:%3.1f",temp); 
053B:  CLRF   27
053C:  MOVF   27,W
053D:  CALL   00C
053E:  INCF   27,F
053F:  MOVWF  77
0540:  MOVWF  35
0541:  CALL   244
0542:  MOVLW  06
0543:  SUBWF  27,W
0544:  BTFSS  03.2
0545:  GOTO   53C
0546:  MOVLW  02
0547:  MOVWF  04
0548:  MOVF   24,W
0549:  MOVWF  2B
054A:  MOVF   23,W
054B:  MOVWF  2A
054C:  MOVF   22,W
054D:  MOVWF  29
054E:  MOVF   21,W
054F:  MOVWF  28
0550:  MOVLW  01
0551:  MOVWF  2C
0552:  GOTO   2DA
.................... 	  printf("\fTemp:%3.1f",temp); 
0553:  CLRF   27
0554:  MOVF   27,W
0555:  CALL   00C
0556:  INCF   27,F
0557:  MOVWF  77
0558:  MOVF   77,W
0559:  BTFSS  0C.4
055A:  GOTO   559
055B:  MOVWF  19
055C:  MOVLW  06
055D:  SUBWF  27,W
055E:  BTFSS  03.2
055F:  GOTO   554
0560:  MOVLW  02
0561:  MOVWF  04
0562:  MOVF   24,W
0563:  MOVWF  2B
0564:  MOVF   23,W
0565:  MOVWF  2A
0566:  MOVF   22,W
0567:  MOVWF  29
0568:  MOVF   21,W
0569:  MOVWF  28
056A:  MOVLW  01
056B:  MOVWF  2C
056C:  GOTO   3A6
....................       delay_ms(100); 
056D:  MOVLW  64
056E:  MOVWF  36
056F:  CALL   01C
....................    } 
0570:  GOTO   4C7
.................... } 
0571:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG
